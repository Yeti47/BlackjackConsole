<Project>
  <Name>BlackjackConsole</Name>
  <ProjectItem type="NClass.DiagramEditor.ClassDiagram.Diagram" assembly="NClass.DiagramEditor, Version=2.4.1823.0, Culture=neutral, PublicKeyToken=null">
    <Name>Blackjack</Name>
    <Language>CSharp</Language>
    <Entities>
      <Entity type="Class">
        <Name>Card</Name>
        <Access>Public</Access>
        <Location left="288" top="172" />
        <Size width="207" height="238" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public abstract int Value { get; }</Member>
        <Member type="Property">public abstract int MinValue { get; }</Member>
        <Member type="Property">public CardSuit Suit { get; }</Member>
        <Member type="Property">public string SuitAsString { get; }</Member>
        <Member type="Property">public virtual string Rank { get; }</Member>
        <Member type="Property">public bool IsHidden { get; set; }</Member>
        <Member type="Method">public override string ToString()</Member>
        <Member type="Method">public virtual string ToAsciiArt()</Member>
        <Modifier>Abstract</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>NumericCard</Name>
        <Access>Public</Access>
        <Location left="47" top="520" />
        <Size width="173" height="222" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int MIN_NUMBER = 2</Member>
        <Member type="Field">public const int MAX_NUMBER = 10</Member>
        <Member type="Field">readonly int _value</Member>
        <Member type="Property">public override int Value { get; }</Member>
        <Member type="Property">public override int MinValue { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>RoyalCard</Name>
        <Access>Public</Access>
        <Location left="471" top="520" />
        <Size width="223" height="222" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int ROYAL_VALUE = 10</Member>
        <Member type="Field">public const int ACE_MIN_VALUE = 1</Member>
        <Member type="Field">public const int ACE_MAX_VALUE = 11</Member>
        <Member type="Property">public override int Value { get; }</Member>
        <Member type="Property">public override int MinValue { get; }</Member>
        <Member type="Property">public override string Rank { get; }</Member>
        <Member type="Property">public RoyalType RoyalType { get; }</Member>
        <Member type="Property">public bool IsAce { get; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Enum">
        <Name>CardSuit</Name>
        <Access>Public</Access>
        <Location left="47" top="187" />
        <Size width="162" height="137" />
        <Collapsed>False</Collapsed>
        <Value>Heart</Value>
        <Value>Spade</Value>
        <Value>Club</Value>
        <Value>Diamond</Value>
      </Entity>
      <Entity type="Enum">
        <Name>RoyalType</Name>
        <Access>Public</Access>
        <Location left="266" top="579" />
        <Size width="162" height="137" />
        <Collapsed>False</Collapsed>
        <Value>Jack</Value>
        <Value>Queen</Value>
        <Value>King</Value>
        <Value>Ace</Value>
      </Entity>
      <Entity type="Class">
        <Name>Deck</Name>
        <Access>Public</Access>
        <Location left="771" top="172" />
        <Size width="254" height="255" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Stack&lt;Card&gt; _cards</Member>
        <Member type="Property">public IEnumerable&lt;Card&gt; Cards { get; }</Member>
        <Member type="Method">public void Initialize()</Member>
        <Member type="Method">public void Shuffle()</Member>
        <Member type="Method">public Card Draw()</Member>
        <Member type="Method">public void Push(Card card)</Member>
        <Member type="Method">public void Push(IEnumerable&lt;Card&gt; cards)</Member>
        <Member type="Method">public void Clear()</Member>
        <Member type="Method">public string ToAsciiArt()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IAsciiArt</Name>
        <Access>Public</Access>
        <Location left="535" top="10" />
        <Size width="181" height="107" />
        <Collapsed>False</Collapsed>
        <Member type="Method">string ToAsciiArt()</Member>
      </Entity>
      <Entity type="Class">
        <Name>Hand</Name>
        <Access>Public</Access>
        <Location left="771" top="463" />
        <Size width="300" height="291" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int MAX_VALUE = 21</Member>
        <Member type="Field">private List&lt;Card&gt; _cards</Member>
        <Member type="Property">public IReadOnlyList&lt;Card&gt; Cards { get; }</Member>
        <Member type="Property">public int Value { get; }</Member>
        <Member type="Property">public bool IsBlackjack { get; }</Member>
        <Member type="Property">public bool IsBust { get; }</Member>
        <Member type="Method">public void AddCard(Card card)</Member>
        <Member type="Method">public IEnumerable&lt;Card&gt; DiscardAll()</Member>
        <Member type="Method">public void Show()</Member>
        <Member type="Method">public int GetVisibleValue(int assumedHiddenVal)</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Interface">
        <Name>IPlayer</Name>
        <Access>Public</Access>
        <Location left="1253" top="649" />
        <Size width="162" height="95" />
        <Collapsed>False</Collapsed>
        <Member type="Property">Hand Hand { get; }</Member>
      </Entity>
      <Entity type="Class">
        <Name>Player</Name>
        <Access>Public</Access>
        <Location left="1102" top="355" />
        <Size width="235" height="197" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const double MAX_BALANCE = 99999.99</Member>
        <Member type="Property">public double CurrentBet { get; set; }</Member>
        <Member type="Property">public double Balance { get; set; }</Member>
        <Member type="Property">public string Name { get; set; }</Member>
        <Member type="Property">public Hand Hand { get; private set; }</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Dealer</Name>
        <Access>Public</Access>
        <Location left="1447" top="355" />
        <Size width="202" height="197" />
        <Collapsed>False</Collapsed>
        <Member type="Field">public const int STAND_VALUE = 17</Member>
        <Member type="Field">private Blackjack _blackjack</Member>
        <Member type="Property">public Hand Hand { get; private set; }</Member>
        <Member type="Constructor">public Dealer(Blackjack blackjack)</Member>
        <Member type="Method">public void PlayTurn()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>Blackjack</Name>
        <Access>Public</Access>
        <Location left="1102" top="10" />
        <Size width="253" height="268" />
        <Collapsed>False</Collapsed>
        <Member type="Property">public Deck Deck { get; }</Member>
        <Member type="Property">public Deck DiscardPile { get; }</Member>
        <Member type="Property">public Player Player { get; }</Member>
        <Member type="Property">public Dealer Dealer { get; }</Member>
        <Member type="Method">public void StartGame(double initialBalance)</Member>
        <Member type="Method">public void Hit()</Member>
        <Member type="Method">public void Double()</Member>
        <Member type="Method">public void Stand()</Member>
        <Modifier>None</Modifier>
      </Entity>
      <Entity type="Class">
        <Name>BlackjackConsoleUi</Name>
        <Access>Public</Access>
        <Location left="1447" top="26" />
        <Size width="209" height="216" />
        <Collapsed>False</Collapsed>
        <Member type="Field">private Blackjack _blackjack</Member>
        <Modifier>None</Modifier>
      </Entity>
    </Entities>
    <Relationships>
      <Relationship type="Generalization" first="2" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Generalization" first="1" second="0">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="0" second="3">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Association" first="5" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="False">
          <X>531</X>
          <Y>243</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Association" first="2" second="4">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>446</X>
          <Y>545</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Association</AssociationType>
      </Relationship>
      <Relationship type="Realization" first="0" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Realization" first="5" second="6">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="7" second="0">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>746</X>
          <Y>484</Y>
        </BendPoint>
        <BendPoint relativeToStartShape="False">
          <X>538</X>
          <Y>341</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
        <StartMultiplicity>1</StartMultiplicity>
        <EndMultiplicity>0..*</EndMultiplicity>
      </Relationship>
      <Relationship type="Realization" first="9" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1216</X>
          <Y>580</Y>
        </BendPoint>
      </Relationship>
      <Relationship type="Realization" first="10" second="8">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
      </Relationship>
      <Relationship type="Association" first="12" second="11">
        <Label>
        </Label>
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1422</X>
          <Y>54</Y>
        </BendPoint>
        <Direction>Unidirectional</Direction>
        <AssociationType>Aggregation</AssociationType>
      </Relationship>
      <Relationship type="Association" first="8" second="7">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Association" first="11" second="9">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <Direction>Bidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Association" first="11" second="10">
        <StartOrientation>Vertical</StartOrientation>
        <EndOrientation>Vertical</EndOrientation>
        <BendPoint relativeToStartShape="True">
          <X>1315</X>
          <Y>304</Y>
        </BendPoint>
        <Direction>Bidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
      <Relationship type="Association" first="11" second="5">
        <StartOrientation>Horizontal</StartOrientation>
        <EndOrientation>Horizontal</EndOrientation>
        <Direction>Unidirectional</Direction>
        <AssociationType>Composition</AssociationType>
      </Relationship>
    </Relationships>
  </ProjectItem>
</Project>